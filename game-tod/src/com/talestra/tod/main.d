/*
	Generated by Entice Designer
	Entice Designer written by Christopher E. Miller
	www.dprogramming.com/entice.php
*/

private import dfl.all;
import std.file, std.string, std.file, std.stream, std.stdio, std.thread, std.zip, std.process, std.conv, std.c.stdlib;
import dfl.internal.utf, dfl.internal.winapi, std.c.windows.windows;
import loadpng, common;
import cdtool, script2, battle, utils, pic, events;
import ppf;

//version = PLAY_MIDI;
version = DELETE_TEMP_FILES;

Main mform;

class Main: dfl.form.Form {
	dfl.button.CheckBox debugc;
	dfl.button.CheckBox opening_checkbox;
	dfl.groupbox.GroupBox groupBox1;
	dfl.button.Button searchb;
	dfl.textbox.TextBox filet;
	dfl.label.Label label4;
	dfl.groupbox.GroupBox groupBox2;
	dfl.button.Button transb;
	dfl.groupbox.GroupBox information_group;
	dfl.button.Button website_button;
	dfl.button.Button credits_button;
	dfl.button.Button talestra_button;
	dfl.picturebox.PictureBox logo;
	dfl.label.Label label2;
	dfl.progressbar.ProgressBar progressBar1;
	StatusBar sbar;

	bool valid_name = false;

	void cenabled(bool enable = true) {
		Control[] clist;
		clist ~= searchb;
		clist ~= transb;
		clist ~= filet;
		clist ~= debugc;
		//clist ~= opening_checkbox;
		//clist ~= website_button;
		//clist ~= credits_button;
		//clist ~= talestra_button;
		foreach (Control c; clist) c.enabled = enable;
		
		if (enable != true) {
			opening_checkbox.enabled = enable;
		} else {
			opening_checkbox.enabled = (std.file.exists(programPath ~ "/OP_JAP.STR") != 0);
		}
		
	}

	this() {
		mform = this;

		icon = new Icon(LoadIconA(GetModuleHandleA(null), cast(char*)101));

		initializeMain();

		logo.image = new AlphaBitmap(GetHBITMAPFromPNG(new MemoryStream(import("logo.png"))));

		// Other Main initialization code here.
		searchb.click ~= &onSearch;
		transb.click ~= &onTranslate;
		filet.keyUp ~= &onUpdateFile;
		website_button.click ~= &onWebsite;
		credits_button.click ~= &onCredits;
		talestra_button.click ~= &onTalestra;
		//this.closing ~= &onClosing;

		updateExistsFile();
		
		(new Thread(delegate int() {
			while (true) {
				//writefln("%d/%d", globalProgress.value, globalProgress.max);
				mform.progressBar1.value   = progress.getProgress(1024);
				mform.progressBar1.maximum = 1024;
				char[] stext = progress.getText;
				if (mform.sbar.text != stext && stext.length) {
					mform.sbar.text = stext;
					mform.sbar.refresh();
				}
				Sleep(10);
				//Thread.getThis.wait(10);
			}
			return 0;
		})).start();
	}
	
	override void onClosing(CancelEventArgs cea) {
		writefln("closing : %d", progress.running);
		if (progress.running) {
			if (DialogResult.YES == msgBox(this, "El parcheador está en proceso, cerrar la ventana parará el proceso y se quedará una iso corrupa. ¿Continuar?", "Atención", MsgBoxButtons.YES_NO, MsgBoxIcon.WARNING, MsgBoxDefaultButton.BUTTON2)) {
				cea.cancel(false);
			} else {
				cea.cancel(true);
			}
		}
	}
	
	void onWebsite(Control c, EventArgs ea) {
		ShellExecuteA(null, "open", "http://tod.tales-tra.com/", null, null, SW_SHOWNORMAL);
	}

	void onCredits(Control c, EventArgs ea) {
		ShellExecuteA(null, "open", "http://tod.tales-tra.com/?s=creditos", null, null, SW_SHOWNORMAL);
	}

	void onTalestra(Control c, EventArgs ea) {
		ShellExecuteA(null, "open", "http://tales-tra.com/", null, null, SW_SHOWNORMAL);
	}

	bool updateControlExists(TextBox tb) {
		if (exists(tb.text) && isfile(tb.text)) {
			tb.backColor = Color(0xF0, 0xFF, 0xF0);
			return true;
		} else {
			tb.backColor = Color(0xFF, 0xF0, 0xF0);
			return false;
		}
	}

	void updateExistsFile() {
		valid_name = updateControlExists(filet);
	}

	char[] isoInput, isoOutput;

	void onTranslate(Control c, EventArgs ea) {
		if (!valid_name) {
			msgBox(this, "No se ha seleccionado un fichero de iso válido", "Atención", MsgBoxButtons.OK, MsgBoxIcon.INFORMATION, MsgBoxDefaultButton.BUTTON1);
			return;
		}

		SaveFileDialog fd = new SaveFileDialog();
		fd.filter = "Imagen de CD (*.bin)|*.bin|Todos los Archivos (*.*)|*.*";
		fd.title = "Selecciona ISO";
		fd.fileName = "Tales of Destiny I - ESP.bin";
		if (fd.showDialog(this) != DialogResult.OK) {
			return;
		}

		try {
			//patch_iso(toStringz(filet.text), "test.bin");
		} catch (Exception e) {
			msgBox(this, e.toString(), "Error", MsgBoxButtons.OK, MsgBoxIcon.ERROR, MsgBoxDefaultButton.BUTTON1);
			return;
		}

		isoInput = filet.text;
		isoOutput = fd.fileName;

		(new Thread(delegate int() {
			mform.cenabled = false;
			bool ok = false;
			try {
				patchIso(mform.isoInput, mform.isoOutput, mform.debugc.checked, mform.opening_checkbox.checked);
				ok = true;
			} catch (Exception e) {
				progress.finished = true;
				msgBox(mform, "Error al parchear la iso: " ~ e.toString(), "Error", MsgBoxButtons.OK, MsgBoxIcon.ERROR, MsgBoxDefaultButton.BUTTON1);
				progress.finished = false;
				progress.running = false;
			}
			if (ok) {
				progress.finished = true;
				msgBox(mform, "Iso creada satisfactoriamente", "¡Éxito!", MsgBoxButtons.OK, MsgBoxIcon.INFORMATION, MsgBoxDefaultButton.BUTTON1);
				progress.finished = false;
				progress.running = false;
			}
			mform.cenabled = true;
			return 0;
		})).start();
	}

	void onUpdateFile(Control c, EventArgs ea) {
		updateExistsFile();
	}

	void onSearch(Control c, EventArgs ea) {
		OpenFileDialog fd = new OpenFileDialog();
		fd.filter = "Imágenes de CD (*.bin; *.img)|*.bin;*.img|Todos los Archivos (*.*)|*.*";
		fd.title = "Selecciona ISO";
		if (fd.showDialog(this) == DialogResult.OK) {
			filet.text = fd.fileName;
			updateExistsFile();
		}
	}

	private void initializeMain() {
		// Do not manually modify this function.
		//~Entice Designer 0.8.4 code begins here.
		//~DFL Form
		formBorderStyle = dfl.all.FormBorderStyle.FIXED_SINGLE;
		startPosition = dfl.all.FormStartPosition.CENTER_SCREEN;
		text = std.string.format("Tales of Destiny en español - v1.1 - %s", __TIMESTAMP__);
		clientSize = dfl.all.Size(430, 324);
		with (sbar = new StatusBar()) {
			sbar.dock = dfl.control.DockStyle.BOTTOM;
			sbar.bounds = dfl.drawing.Rect(0, 250, 292, 23);
			sbar.parent = this;
			sbar.text = "";
			sbar.showPanels = false;
		}

		with (logo = new dfl.picturebox.PictureBox()) {
			bounds = dfl.all.Rect(0, 0, 432, 113);
			parent = this;
		}
		{
			with (groupBox1 = new dfl.groupbox.GroupBox()) {
				text = " ISO ";
				bounds = dfl.all.Rect(7, 122, 416, 64);
				parent = this;
			}
			with (searchb = new dfl.button.Button()) {
				searchb.text = "Buscar...";
				searchb.bounds = dfl.all.Rect(328, 23, 78, 26);
				searchb.parent = groupBox1;
			}
			with (filet = new dfl.textbox.TextBox()) {
				filet.bounds = dfl.all.Rect(56, 24, 263, 24);
				//filet.text = r"f:\isos\psx\Tales of Destiny I.bin";
				//filet.text = r"c:\juegos\tod\Tales of Destiny I.bin";
				filet.text = "";
				filet.parent = groupBox1;
			}
			with (label4 = new dfl.label.Label()) {
				text = "Original:";
				bounds = dfl.all.Rect(10, 28, 40, 16);
				parent = groupBox1;
			}
		}
		{
			with (groupBox2 = new dfl.groupbox.GroupBox()) {
				text = " Opciones ";
				bounds = dfl.all.Rect(7, 194, 92, 58);
				parent = this;
			}
			with (debugc = new dfl.button.CheckBox()) {
				enabled = true;
				text = "Modo &debug";
				checkState = dfl.all.CheckState.UNCHECKED;
				bounds = dfl.all.Rect(8, 13, 80, 24);
				parent = groupBox2;
			}
			with (opening_checkbox = new dfl.button.CheckBox()) {
				enabled = (std.file.exists(programPath ~ "/OP_JAP.STR") != 0);
				text = "Opening &JAP";
				checkState = enabled ? dfl.all.CheckState.CHECKED : dfl.all.CheckState.UNCHECKED;
				bounds = dfl.all.Rect(8, 32, 80, 24);
				parent = groupBox2;
			}
		}
		{
			with (information_group = new dfl.groupbox.GroupBox()) {
				text = " Información ";
				bounds = dfl.all.Rect(107, 194, 316, 58);
				parent = this;
			}
			with (credits_button = new dfl.button.Button()) {
				text = "Créditos...";
				bounds = dfl.all.Rect(228, 20, 78, 26);
				parent = information_group;
			}
			with (website_button = new dfl.button.Button()) {
				text = "Página web...";
				bounds = dfl.all.Rect(130, 20, 90, 26);
				parent = information_group;
			}
			with (talestra_button = new dfl.button.Button()) {
				text = "Tales Translations";
				bounds = dfl.all.Rect(10, 20, 112, 26);
				parent = information_group;
			}
		}
		{
			with (progressBar1 = new dfl.progressbar.ProgressBar()) {
				bounds = dfl.all.Rect(7, 264, 295, 24);
				parent = this;
			}
			with (transb = new dfl.button.Button()) {
				text = "Traducir";
				bounds = dfl.all.Rect(311, 263, 112, 26);
				parent = this;
			}
		}
	}
}

void deleteTempFiles() {
	version (DELETE_TEMP_FILES) {
		void removeTempFile(char[] name) { try { std.file.remove(tempDir ~ "/" ~ name); } catch (Exception e) { } }
	
		removeTempFile("B.DAT");
		removeTempFile("BF.D");
		removeTempFile("BF_SPA.D");
		removeTempFile("DBG_SPA.D");
		removeTempFile("M.B");
		removeTempFile("M.DAT");
		removeTempFile("M_SPA.B");
		removeTempFile("M_SPA.DAT");
		removeTempFile("B_SPA.DAT");
		removeTempFile("BF_SPA.DAT");
		removeTempFile("DBG_SPA.DAT");
		removeTempFile("DEBUG.TXT");
		removeTempFile("E.DAT");
		removeTempFile("E_SPA.DAT");
		removeTempFile("INI_SPA.D");
		removeTempFile("KAISEN.BIN");
		removeTempFile("MC.D");
		removeTempFile("MC.U");
		removeTempFile("MC_SPA.D");
		removeTempFile("MC_SPA.U");
		removeTempFile("SLES_106.26");
		removeTempFile("SLUS_006.26");
		removeTempFile("TKM.BIN");
		removeTempFile("MOVIE/OP.STR");
		try { std.file.rmdir(tempDir ~ "/MOVIE"); } catch (Exception e ) { }
		try { std.file.rmdir(tempDir); } catch (Exception e ) { }
	}
}

void createTempFolders() {
	try { mkdir(tempDir); } catch { }
	try { mkdir(tempDir ~ "/MOVIE"); } catch { }
}

void patchIso(char[] input, char[] output, bool debugmode = true, bool opening_jap = true) {
	deleteTempFiles();
	createTempFolders();
	//try { unlink(output); } catch (Exception e) { }
	IsoBuilder ib;
	try {
		ib = new IsoBuilder(toAnsi(input), toAnsi(output));
		if (!ib.exists("SLUS_006.26")) throw(new Exception(""));
	} catch (Exception e) {
		//ib.extractFile("MOVIE/OP.STR", programPath ~ "/OP_JAP.STR");
		throw(new Exception("La ISO no es del 'Tales of Destiny I' (USA)"));
	}
	
	scope (exit) progress.running = false;
	
	progress.setTotalTime(107224);
	progress.running = true;
	
	progress.setGlobalStep(13, "Extrayendo ejecutable...");

	// EXE
	//printf("Extrayendo ejecutable...");
	{
		ib.extractFile("SLUS_006.26", tempDir ~ "/SLUS_006.26");
		std.file.copy(tempDir ~ "/SLUS_006.26", tempDir ~ "/SLES_106.26");
	}
	//printf("Ok\n");
	
	progress.setGlobalStep(28, "Parcheando ejecutable (I)...");

	//printf("Parcheando ejecutable (I)...");
	{
		File file = new File(tempDir ~ "/SLES_106.26", FileMode.In | FileMode.Out);
		// PPF (Texts + Font + Items + Skills).
		{
			ppfPatch(new MemoryStream(import("SLUS_006.26.ppf")), file);
		}
		file.close();
	}
	//printf("Ok\n");
	
	progress.setGlobalStep(234, "Extrayendo archivos de batalla...");

	//printf("Extrayendo archivos de batalla...");
	if (true) {
		if (!std.file.exists(tempDir ~ "/B.DAT")) ib.extractFile("/DAT/B.DAT", tempDir ~ "/B.DAT");
	}
	//printf("Ok\n");
	
	progress.setGlobalStep(1667, "Extrayendo archivos de batalla...");

	//printf("Parcheando archivos de batalla y ejecutable...");
	if (true) {
		patchBattle();
	}
	//printf("Ok\n");
	
	progress.setGlobalStep(9681, "Extrayendo script...");

	//printf("Extrayendo script...");
	if (true) {
		if (!std.file.exists(tempDir ~ "/M.B"  )) ib.extractFile("/DAT/M.B"  , tempDir ~ "/M.B");
		if (!std.file.exists(tempDir ~ "/M.DAT")) ib.extractFile("/DAT/M.DAT", tempDir ~ "/M.DAT");
	}
	//printf("Ok\n");
	
	progress.setGlobalStep(62066, "Parcheando script...");

	printf("Parcheando script...");
	if (!std.file.exists(tempDir ~ "/M_SPA.B") || !std.file.exists(tempDir ~ "/M_SPA.DAT")) {
		printf("\n");
		patchScript();
		printf("Parcheando script...Ok\n");
	} else {
		printf("Cached\n");
	}
	
	progress.setGlobalStep(7, "Extrayendo minijuegos...");

	//printf("Extrayendo minijuegos...");
	{
		ubyte[][char[]] patches;
		patches["KAISEN"] = cast(ubyte[])import("KAISEN.BIN.ppf");
		patches["TKM"]    = cast(ubyte[])import("TKM.BIN.ppf");
		foreach (name; ["KAISEN", "TKM"]) {
			ib.extractFile("DAT/" ~ name ~ ".BIN", tempDir ~ "/" ~ name ~ ".BIN");
			ib.extractFile("DAT/" ~ name ~ ".BIN", tempDir ~ "/" ~ name ~ ".BIN");
			{
				File file = new File(tempDir ~ "/" ~ name ~ ".BIN", FileMode.In | FileMode.Out);
				// PPF (Texts + Font + Items + Skills).
				{
					ppfPatch(new MemoryStream(patches[name]), file);
				}
				file.close();
			}
		}
	}
	//printf("Ok\n");
	
	progress.setGlobalStep(5, "Extrayendo tablas de personajes (normal y debug)...");

	//printf("Extrayendo tabla de personajes...");
	{
		//ib.extractFile("DAT/INI.D", tempDir ~ "/INI.D");
		scope f = new File(tempDir ~ "/INI_SPA.D", FileMode.OutNew);
		f.copyFrom(Compression.Compress(new MemoryStream(import("INI.D"))));
		f.close();
	}
	{
		//ib.extractFile("DAT/INI.D", tempDir ~ "/INI.D");
		scope f = new File(tempDir ~ "/DBG_SPA.D", FileMode.OutNew);
		f.copyFrom(Compression.Compress(new MemoryStream(import("DBG.D"))));
		f.close();
	}
	//printf("Ok\n");
	
	progress.setGlobalStep(744, "Extrayendo eventos...");
	
	//printf("Extrayendo eventos...");
	{
		ib.extractFile("DAT/E.DAT", tempDir ~ "/E.DAT");
		patchEvents();
	}
	//printf("Ok\n");
	
	progress.setGlobalStep(13709, "Copiando carpeta DAT...");

	//printf("Copiando carpeta DAT...");
	with (ib.root.createDir("DAT")) {
		createFile("B.DAT",      tempDir ~ "/B_SPA.DAT");
		copyFile("BVB.D");
		createFile("DBG.D",      tempDir ~ "/DBG_SPA.D");
		createFile("E.DAT",      tempDir ~ "/E_SPA.DAT");
		createFile("INI.D",      tempDir ~ "/INI_SPA.D");
		createFile("KAISEN.BIN", tempDir ~ "/KAISEN.BIN");
		copyFile("S.DAT");
		copyFile("TALE.VB");
		createFile("TKM.BIN",    tempDir ~ "/TKM.BIN");
		createFile("M.B",        tempDir ~ "/M_SPA.B");
		createFile("M.DAT",      tempDir ~ "/M_SPA.DAT");
	}
	//printf("Ok\n");
	
	progress.setGlobalStep(1184, "Copiando carpeta MOVIE...");

	//printf("Copiando carpeta MOVIE...");
	{
		char[] file_op_jap_str = programPath ~ "/OP_JAP.STR";
		if (opening_jap && std.file.exists(file_op_jap_str)) {
			scope file = new BufferedFile(file_op_jap_str, FileMode.In);
			/*if (file.readString(4) == "RIFF") {
				//file.position = 60;
				file.position = 60;
			} else {
				file.position = 0;
			}*/
			std.file.write(tempDir ~ "/MOVIE/OP.STR", cast(ubyte[])file.readString(file.size - file.position));
			file.close();

			//ib.extractFile("MOVIE/OP.STR", tempDir ~ "/MOVIE/OP.STR");

			//printf("[OP_JAP.STR found!!]\n");
			//std.file.copy(r"C:\projects\talestra\tod\patcher\OP_JAP.STR", tempDir ~ "/MOVIE/OP.STR");
			//createFile("OP.STR", "OP_JAP.STR", MODE2_FORM2);
		} else {
			printf("[OP_JAP.STR NOT FOUND]\n");
			//copyFile("OP.STR");
		}
		ib.root.copyDir("MOVIE", null, -1, tempDir ~ "/MOVIE");
	}
	//printf("Ok\n");
	
	progress.setGlobalStep(176, "Copiando carpeta PIC...");

	//printf("Copiando carpeta PIC...");

	ib.extractFile("/PIC/BF.D", tempDir ~ "/BF.D");
	ib.extractFile("/PIC/MC.D", tempDir ~ "/MC.D");
	prepare_pic(tempDir);
	with (ib.root.createDir("PIC")) {
		createFile("BF.D",    tempDir ~ "/BF_SPA.D");
		copyFile("FACE.D");
		copyFile("FACE2.D");
		copyFile("I.D");
		createFile("MC.D",    tempDir ~ "/MC_SPA.D");
		copyFile("RC.D");
		copyFile("WM.D");
	}
	//printf("Ok\n");
	
	progress.setGlobalStep(16109, "Copiando carpeta XA...");

	//printf("Copiando carpeta XA...");
	ib.root.copyDir("XA");
	//printf("Ok\n");
	
	progress.setGlobalStep(85, "Copiando nuevo ejecutable...");

	//printf("Copiando nuevo ejecutable...");
	ib.createFile(ib.root, "SLES_106.26", tempDir ~ "/SLES_106.26");
	//printf("Ok\n");
	
	progress.setGlobalStep(87, "Copiando antiguo ejecutable...");

	//printf("Copiando antiguo ejecutable...");
	ib.copyFile(ib.root, "SLUS_006.26", "SLUS_006.26");
	//printf("Ok\n");
	
	progress.setGlobalStep(2, "Creando nuevo SYSTEM.CNF...");

	//printf("Creando nuevo SYSTEM.CNF...");
	ib.createFile(ib.root, "SYSTEM.CNF", cast(ubyte[])(
		"BOOT = cdrom:\\SLES_106.26;1\r\n"
		"TCB = 4\r\n"
		"EVENT = 16\r\n"
		"STACK = 801FFF00\r\n"
	));
	//printf("Ok\n");
	
	if (debugmode) {
		progress.setGlobalStep(0, "Añadiendo modo debug...");

		//printf("Añadiendo modo debug...");
		(new File(tempDir ~ "/DEBUG.TXT", FileMode.OutNew)).close();
		ib.createFile(ib.root, "DEBUG.TXT", tempDir ~ "/DEBUG.TXT");
		//printf("Ok\n");
	}

	//std.file.remove(tempDir ~ "/SLES_106.26");
	//std.file.remove(tempDir ~ "/DEBUG.TXT");

	progress.setGlobalStep(1427, "Finalizando iso...");

	//printf("Finalizando iso...");
	delete ib;
	//printf("Ok\n");
	
	deleteTempFiles();
}

// La 609 falla
void patchScript() {
	script2.PatchScript(tempDir ~ "/M", tempDir ~ "/M_SPA", new MemoryStream(import("script.bin")));
}

//extern(Windows) int mciExecute(char* cmd);
//pragma(lib, "winmm.lib");

char[] fromAnsi(char[] s) {
	return dfl.internal.utf.fromAnsi(cast(char *)s.ptr, cast(size_t)s.length);
}

extern (Windows) HWND GetConsoleWindow();

int com.talestra.criminalgirls.main(char[][] args) {
	//std.file.write("output.test", cast(ubyte[])import("INI.D"));
	int result = 0;
	//writefln("1");

	HWND hWnd = GetConsoleWindow();
	if (!std.file.exists(programPath ~ "/show_console.txt")) ShowWindow(hWnd, SW_HIDE);
	
	//writefln("2");

	chdir(programPath);
	
	//writefln("3");

	tempDir = fromAnsi(toString(std.c.stdlib.getenv("TEMP"))) ~ "/TOD_SPA";
	//tempDir = programPath ~ "/TEMP";
	
	//writefln("4");
	//tempDir = programPath ~ "\\temp";

	createTempFolders();
	
	try {
		Application.enableVisualStyles();
		Application.run(new Main());
	} catch (Object o) {
		msgBox(o.toString(), "Fatal Error", MsgBoxButtons.OK, MsgBoxIcon.ERROR);
		result = 1;
	}

	return result;
}
