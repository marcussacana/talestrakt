/*
	Generated by Entice Designer
	Entice Designer written by Christopher E. Miller
	www.dprogramming.com/entice.php
*/

import dfl.all;

import std.string, std.stream, std.stdio, std.file;

import tocommon;
/*
import test, test_psearch;
import check, npc, btl, skits, script, exe, misc, movie, field, lzma;
import btl_enm, pfs;
import http;
*/

class FormProgress: dfl.form.Form
{
	// Do not modify or move this block of variables.
	//~Entice Designer variables begin here.
	dfl.button.Button button2;
	dfl.picturebox.PictureBox pictureBox2;
	dfl.progressbar.ProgressBar progressBar1;
	dfl.label.Label label6;
	//~Entice Designer variables end here.
	
	static FormProgress self;
	
	bool mustClose = false;
	
	Image bg;
	Timer t;
	
	this()
	{
		initializeFormProgress();
		
		//@  Other FormProgress initialization code here.
		
		button2.click ~= &onClickCancel;

		bg = dfl.drawing.Picture.fromStream(FS.patch["patcher/pbg.jpg"].open);
		
		setRoll();
		
		t = new Timer();
		t.interval = 40000;
		t.tick ~= &onTick;
		t.start();
		
		self = this;
	}
	
	int rollpos = 0;
	int rollmax = 8;
	
	void onClickCancel(Control c, EventArgs ea) {
		owner.close();
	}

	override void onClosing(CancelEventArgs cea) {
		t.stop();
		self = null;
	}
	
	void setRoll() {
		int pos = rollpos % rollmax;
		writefln("setRoll(%d);", pos);
		pictureBox2.image = dfl.drawing.Picture.fromStream(FS.patch[std.string.format("patcher/roll/%d.jpg", pos)].open);
	}
	
	void onTick(Timer t, EventArgs ea) {
		rollpos++;
		setRoll();
	}
	
	
	private void initializeFormProgress()
	{
		// Do not manually modify this function.
		//~Entice Designer 0.8.5.02 code begins here.
		//~DFL Form
		controlBox = false;
		formBorderStyle = dfl.all.FormBorderStyle.NONE;
		maximizeBox = false;
		minimizeBox = false;
		showInTaskbar = false;
		startPosition = dfl.all.FormStartPosition.CENTER_PARENT;
		text = "Form Progress";
		transparencyKey = dfl.all.Color(255, 0, 0);
		clientSize = dfl.all.Size(424, 312);
		//~DFL dfl.button.Button=button2
		button2 = new dfl.button.Button();
		button2.name = "button2";
		button2.font = new dfl.all.Font("Georgia", 9f, dfl.all.FontStyle.REGULAR);
		button2.text = "Cancelar";
		button2.bounds = dfl.all.Rect(328, 282, 88, 20);
		button2.parent = this;
		//~DFL dfl.picturebox.PictureBox=pictureBox2
		pictureBox2 = new dfl.picturebox.PictureBox();
		pictureBox2.name = "pictureBox2";
		pictureBox2.bounds = dfl.all.Rect(12, 33, 400, 216);
		pictureBox2.parent = this;
		//~DFL dfl.progressbar.ProgressBar=progressBar1
		progressBar1 = new dfl.progressbar.ProgressBar();
		progressBar1.name = "progressBar1";
		progressBar1.bounds = dfl.all.Rect(16, 284, 304, 16);
		progressBar1.parent = this;
		//~DFL dfl.label.Label=label6
		label6 = new dfl.label.Label();
		label6.name = "label6";
		label6.backColor = dfl.all.Color(0, 0, 0);
		label6.font = new dfl.all.Font("Lucida", 9f, dfl.all.FontStyle.REGULAR);
		label6.foreColor = dfl.all.Color(255, 255, 255);
		label6.text = "Parcheando...";
		label6.textAlign = dfl.all.ContentAlignment.MIDDLE_CENTER;
		label6.bounds = dfl.all.Rect(16, 264, 304, 20);
		label6.parent = this;
		//~Entice Designer 0.8.5.02 code ends here.
	}
	
	override void onPaintBackground(PaintEventArgs pea) {
		auto g = pea.graphics;
		bg.draw(g, Point(0, 0));		
	}
	
	//override void onPaint(PaintEventArgs pea) { }	
}

void progressCallback(Progress.ProgressEntry[] ps, int end = 0) {
	auto f = FormProgress.self; if (!f) return;

	if (end != 0) {
		f.progressBar1.minimum = 0;
		f.progressBar1.maximum = 1;
		f.progressBar1.step = 1;
		f.progressBar1.value = 1;
		if (end > 0) {
			f.label6.text = "Listo ^_^";
			f.pictureBox2.image = dfl.drawing.Picture.fromStream(FS.patch["patcher/roll/success.jpg"].open);
		} else {
			f.label6.text = "Error :`(";
			f.pictureBox2.image = dfl.drawing.Picture.fromStream(FS.patch["patcher/roll/fail.jpg"].open);
		}
		f.t.stop();
		return;
	}
	
	if (ps.length < 1) return;
	int max = ps[0].max * 100;
	int value = 0, mult = 100;
	int sp = 3;
	for (int n = 0; n < 3; n++) {
		if (n >= ps.length) break;
		if (ps[n].max > 0) value += ((ps[n].cur * mult) * 10) / ps[n].max;
		mult /= 10;
	}
	f.progressBar1.minimum = 0;
	f.progressBar1.maximum = max;
	f.progressBar1.step = 1;
	f.progressBar1.value = value;
	//writefln("%d,%d", ps[0].cur, ps[0].max);
	//writefln("callback(%d)", progressStack.length);
	Progress.ProgressEntry lp = ps[ps.length - 1];
	
	f.label6.text = std.string.format("%s (%d/%d)", lp.name, lp.cur, lp.max);
}

static this() {
	Progress.updateCallback = &progressCallback;
}